{"version":3,"sources":["../../../../src/tradingtimes/tradingTimes.es6"],"names":["table","tradingWin","select","sub_select","processData","markets","market_names","submarket_names","filter","loginId","local_storage","get","loginid","test","eMarket","name","forEach","market","push","display_name","submarkets","submarket","isRestrictedSymbol","getRowsFor","marketname","submarket_name","m","symbols","s","instruments","console","log","rows","map","sym","times","open","close","settlement","events","length","descrip","dates","join","init","$menuLink","require","click","windows","createBlankWindow","title","i18n","dialogClass","width","height","track","module_id","is_unique","data","dialog","initTradingWin","moveToTop","$html","subheader","appendTo","dataTable","className","paging","ordering","searching","processing","parent","addClass","api","columns","every","column","header","on","search","value","draw","changedFn","refreshTable","yyyy_mm_dd","updateTable","result","market_name","remove","add","refresh","menu","extractFilteredMarkets","active_symbols","markets_sorted_list","$","isEmptyObject","changed","val","cumulative_submarkets","Object","keys","item","update_list","makeSelectmenu","list","inx","off","getCachedData","trading_times_request","trading_times","$processing_msg","attr","show","Promise","all","liveapi","cached","send","then","results","hide","catch","error","growl","message","moment","utc","format","maxDate","toDate","addDateToHeader","date"],"mappings":"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","file":"tradingTimes.js","sourcesContent":["ï»¿import $ from 'jquery';\nimport windows from 'windows/windows';\nimport liveapi from 'websockets/binary_websockets';\nimport menu from 'navigation/menu';\nimport 'datatables';\nimport 'jquery-growl';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { getObjectMarketSubmarkets, getSortedMarkets, getSortedSubmarkets } from '../common/marketUtils';\nimport 'common/util'\n\nlet table = null;\nlet tradingWin = null;\nlet select = null;\nlet sub_select = null;\n\n/* data: result of trading_times api */\nconst processData = (markets) => {\n   markets = markets || [];\n   //    || [{\n   //    display_name: 'Forex',\n   //    submarkets: [{\n   //        display_name: 'Major Paris',\n   //        instruments: [{\n   //            delay_amount: 0,\n   //            events: [{dates:'Fridays',descrip:'Closes early at(21:00)'}],\n   //            display_name: 'AUD/JPY',\n   //            settlement: '23:59:59',\n   //            symbol: 'frxAUDJPY',\n   //            times: {\n   //                close: ['23:59:59'],\n   //                open: ['00:00:00']\n   //            }\n   //        }]\n   //    }]\n   //}];\n   /* extract market and submarket names */\n   const market_names = [];\n   const submarket_names = { };\n   markets\n    .filter(eMarket => {\n      const loginId = (local_storage.get('authorize') || {}).loginid || '';\n      return (/MF/gi.test(loginId) && eMarket.name !== 'Synthetic Indices')\n        || (/MLT/gi.test(loginId) && eMarket.name === 'Synthetic Indices')\n        || (/MX/gi.test(loginId) && eMarket.name === 'Synthetic Indices')\n        || (!/MF/gi.test(loginId) && !/MLT/gi.test(loginId) && !/MX/gi.test(loginId));\n    })\n    .forEach((market) => {\n      market_names.push(market.display_name);\n      submarket_names[market.display_name] = [];\n      market.submarkets.forEach(\n        (submarket) => {\n           if (!isRestrictedSymbol(submarket.name)) {\n\n            submarket_names[market.display_name].push(submarket.display_name)\n           }\n         }\n     )\n   });\n\n  return {\n    market_names: market_names,\n    submarket_names: submarket_names,\n    /* get the rows for this particular marketname and sumbarket_name */\n    getRowsFor: function(marketname, submarket_name) {\n      // TODO: comeback and use lodash once 'trade module' changes got merged.\n      const market = markets.filter((m) => (m.display_name == marketname))[0];\n      const symbols = market && market.submarkets.filter((s) => (s.display_name == submarket_name))[0].instruments;\n      console.log(symbols)\n      const rows = (symbols || []).map((sym) => {\n        return [\n          sym.display_name,\n          sym.times.open[0],\n          sym.times.close[0],\n          sym.times.settlement || sym.settlement || '-',\n          (sym.events && sym.events.length > 0) ?\n            sym.events\n              .map(({descrip, dates}) => `${descrip}: ${dates}`)\n              .join('<br>')\n            : '-',\n        ];\n      });\n      return rows;\n    }\n  };\n}\n\nexport const init = ($menuLink) => {\n   require([\"css!tradingtimes/tradingTimes.css\"]);\n   $menuLink.click(() => {\n      if (!tradingWin) {\n         tradingWin = windows.createBlankWindow($('<div/>'), {\n            title: 'Trading Times'.i18n(),\n            dialogClass: 'tradingTimes',\n            width: 800,\n            height: 400,\n         });\n         tradingWin.track({\n            module_id: 'tradingTimes',\n            is_unique: true,\n            data: null\n         });\n         tradingWin.dialog('open');\n         require(['text!tradingtimes/tradingTimes.html'], initTradingWin);\n      }\n      else\n         tradingWin.moveToTop();\n   });\n}\n\nconst initTradingWin = ($html) => {\n   $html = $($html).i18n();\n   const subheader = $html.filter('.trading-times-sub-header');\n   table = $html.filter('table');\n   $html.appendTo(tradingWin);\n\n   table = table.dataTable({\n      data: [],\n      \"columnDefs\": [\n         { className: \"dt-body-center dt-header-center\", \"targets\": [ 0,1,2,3,4 ] }\n      ],\n      paging: false,\n      ordering: false,\n      searching: true,\n      processing: true\n   });\n   table.parent().addClass('hide-search-input');\n\n   // Apply the a search on each column input change\n   table.api().columns().every(function () {\n      const column = this;\n      $('input', this.header()).on('keyup change', function () {\n         if (column.search() !== this.value)\n            column.search(this.value) .draw();\n      });\n   });\n\n   let market_names = null,\n      submarket_names = null,\n      changedFn = null;\n\n   const refreshTable = (yyyy_mm_dd) => {\n      /* update the table with the given marketname and submarketname */\n      const updateTable = (result, market_name,submarket_name) => {\n         const rows = result.getRowsFor(market_name, submarket_name);\n         table.api().rows().remove();\n         table.api().rows.add(rows);\n         table.api().draw();\n      }\n\n      /* refresh the table with result of {trading_times:yyyy_mm_dd} from WS */\n      const refresh = (data) => {\n        const result = processData(menu.extractFilteredMarkets(data[0]));\n        const active_symbols = local_storage.get('active_symbols');\n        let header = getObjectMarketSubmarkets(active_symbols);\n        const markets_sorted_list = getSortedMarkets(active_symbols);\n        \n        if($.isEmptyObject(header)) return;\n\n        function changed() {\n          const val = $(this).val();\n          header = getObjectMarketSubmarkets(local_storage.get('active_symbols'));\n          \n\n          if (header[val]) {\n             const cumulative_submarkets = Object.keys(header[val]).filter(item => !isRestrictedSymbol(item))\n             submarket_names.update_list(getSortedSubmarkets(cumulative_submarkets))\n            };\n\n          updateTable(result, market_names.val(), submarket_names.val());\n        };\n\n          if (market_names == null) {\n              const select = $('<select />');\n              select.appendTo(subheader);\n              market_names = windows.makeSelectmenu(select, {\n                list: markets_sorted_list,\n                inx: 0,\n              });\n              market_names.off('selectmenuchange', changed);\n              market_names.on('selectmenuchange', changed);\n          } else {\n            market_names.update_list(markets_sorted_list);\n            market_names.off('selectmenuchange', changed);\n            market_names.on('selectmenuchange', changed);\n        }\n\n          if (submarket_names == null) {\n              const sub_select = $('<select />');\n              sub_select.appendTo(subheader);\n              submarket_names = windows.makeSelectmenu(sub_select, {\n                list: getSortedSubmarkets(Object.keys(header[market_names.val()])),\n                inx: 0,\n                changed: changedFn,\n              });\n              submarket_names.off('selectmenuchange', changed);\n              submarket_names.on('selectmenuchange', changed);\n            } else {\n            submarket_names.update_list(getSortedSubmarkets(Object.keys(header[market_names.val()])));\n            submarket_names.off('selectmenuchange', changed);\n            submarket_names.on('selectmenuchange', changed);\n        }\n\n          updateTable(result, market_names.val(), submarket_names.val());\n      };\n\n      const getCachedData = () => {\n         const trading_times_request = { trading_times: yyyy_mm_dd };\n         const $processing_msg = $('#' + table.attr('id') + '_processing');\n\n         $processing_msg.show();\n         Promise.all(\n             [\n                 liveapi.cached.send(trading_times_request),\n             ])\n             .then((results) => {\n                 refresh(results);\n                 $processing_msg.hide();\n             })\n             .catch((error) => {\n                 $.growl.error({ message: error.message });\n                 $processing_msg.hide();\n             });\n       };\n\n      getCachedData();\n      require(['websockets/binary_websockets'], (liveapi) => {\n          liveapi.events.on('login', getCachedData);\n          liveapi.events.on('logout', getCachedData);\n       });\n   }\n\n   refreshTable(moment.utc().format('YYYY-MM-DD'));\n   const maxDate = moment.utc().add(1, 'years').toDate();\n   tradingWin.addDateToHeader({\n      title: 'Date: ',\n      date: moment.utc().toDate(),\n      changed: refreshTable,\n      maxDate,\n   });\n}\n\nexport default {\n   init\n}\n"]}